AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A web site

Parameters:
  HostedZoneId:
    Type: String
  DomainName:
    Type: String
  BlogName:
    Type: String
  BlogDescription:
    Type: String
  AuthorName:
    Type: String
  AuthorizationEndpoint:
    Type: String
  TokenEndpoint:
    Type: String

Globals:
  Function:
    Timeout: 3

Resources:
  SiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId

  DNSAliasV4:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName 
      HostedZoneId: !Ref HostedZoneId
      Type: A
      AliasTarget:
        DNSName: !GetAtt CDN.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  DNSAliasV6:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName 
      HostedZoneId: !Ref HostedZoneId
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt CDN.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        DefaultRootObject: feeds/default/index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        DefaultCacheBehavior:
          AllowedMethods: ['GET', 'HEAD']
          CachedMethods: ['GET', 'HEAD']
          Compress: true
          DefaultTTL: 31536000
          TargetOriginId: BucketFailoverToRenderAPI
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
           AcmCertificateArn: !Ref Certificate
           SslSupportMethod: sni-only
        Origins:
          - DomainName: !GetAtt SiteBucket.DualStackDomainName
            Id: SiteBucketOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
          - DomainName: !Sub "${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
            Id: RenderAPI
            OriginPath: /render
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        OriginGroups:
          Quantity: 1
          Items:
            - Id: BucketFailoverToRenderAPI
              FailoverCriteria: 
                StatusCodes: 
                  Items:
                    - 404
                  Quantity: 1
              Members:
                Quantity: 2
                Items:
                  - OriginId: SiteBucketOrigin
                  - OriginId: RenderAPI


  PageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: Data
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: GS1
          Projection:
            ProjectionType: KEYS_ONLY
          KeySchema:
            - AttributeName: SK
              KeyType: HASH
            - AttributeName: Data
              KeyType: RANGE
      KeySchema: 
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  RenderFunction:    
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: render_function/
      Handler: app.lambda_handler
      Runtime: python3.8
      AutoPublishAlias: live
      Description: ''
      Environment:
        Variables:
          SITE_BUCKET: !Ref SiteBucket
          BLOG_NAME: !Ref BlogName
          BLOG_DESCRIPTION: !Ref BlogDescription
          DOMAIN_NAME: !Ref DomainName
          AUTHORIZATION_ENDPOINT: !Ref AuthorizationEndpoint
          TOKEN_ENDPOINT: !Ref TokenEndpoint
      MemorySize: 128
      Timeout: 300
      Events:
          HttpApiEvent:
            Type: HttpApi
            Properties:
              Path: /render/{path+}
              Method: GET
    Metadata:
      BuildMethod: makefile

  BlogConfigFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: blog_config_custom_resource/
      Handler: blog_config.lambda_handler
      Runtime: python3.8
      Description: ''
      Environment:
        Variables:
          TABLE: !Ref PageTable
          BUCKET: !Ref SiteBucket
          CDN: !Ref CDN
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PageTable
        - S3CrudPolicy:
            BucketName: !Ref SiteBucket
        - Version: '2012-10-17'
          Statement:
          - Sid: AllowAllCloudFrontPermissions
            Effect: Allow
            Action:
            - cloudfront:CreateInvalidation
            Resource: "arn:aws:cloudfront::797438674243:distribution/*"

      MemorySize: 128
      Timeout: 300

  BlogConfig:
    Type: 'Custom::CustomResource'
    Properties:
      RenderFunctionVersion: !Ref RenderFunction.Version
      DomainName: !Ref DomainName
      BlogName: !Ref BlogName
      BlogDescription: !Ref BlogDescription
      AuthorName: !Ref AuthorName
      AuthorizationEndpoint: !Ref AuthorizationEndpoint
      TokenEndpoint: !Ref TokenEndpoint
      ServiceToken:
        'Fn::GetAtt':
          - BlogConfigFunction
          - Arn
    DependsOn:
      - RenderFunction