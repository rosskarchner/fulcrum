AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A simple, single user Indieauth implementation

Globals:
  Function:
    Timeout: 10

Parameters:
  CognitoDomain:
    Type: String
  ApiDomain:
    Type: String
  HostedZoneId:
    Type: String

Resources:
  IndieAuthApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        CertificateArn: !Ref ApiDomainCertificate
        DomainName: !Ref ApiDomain
        Route53:
          HostedZoneId: !Ref HostedZoneId

  IndieAuthBackendApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          UpstreamCognitoAuthorizor:
            AuthorizationScopes:
              - https://indieauth.spec.indieweb.org/profile

            IdentitySource: $request.header.Authorization
            JwtConfiguration:
              audience:
                - !Ref UserPoolClient
              issuer: "https://cognito-idp.us-east-1.amazonaws.com/us-east-1_O2ArXt8eg"

  RequestContinuationBucket:
    # TODO: encrypt
    Type: AWS::S3::Bucket

  SessionStorage:
    # TODO: encrypt
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: AgeOut
            Status: Enabled
            ExpirationInDays: 1

  CodeExchangeStorage:
    # TODO: encrypt
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: AgeOut
            Status: Enabled
            ExpirationInDays: 1

  ConfirmAuthenticationOrAuthorizationStorage:
    # TODO: encrypt
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: AgeOut
            Status: Enabled
            ExpirationInDays: 1
  
  AuthorizationEndpointGet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorization_endpoint_get/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          SESSION_BUCKET: !Ref SessionStorage
          CONTINUATION_BUCKET: !Ref RequestContinuationBucket
          UPSTREAM_OAUTH_AUTHORIZE: !Sub "https://${CognitoDomain}/oauth2/authorize"
          USER_POOL_CLIENT: !Ref UserPoolClient
      Policies:
        - S3WritePolicy:
            BucketName: !Ref RequestContinuationBucket
        - S3ReadPolicy:
            BucketName: !Ref SessionStorage
      Events:
        AuthorizationGet:
          Type: HttpApi
          Properties:
            Path: "/{upstream_sub_id}/authorization"
            Method: GET
            ApiId: !Ref IndieAuthApi

  CreateConfirmationTicket:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create_confirmation_ticket/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          SESSION_BUCKET: !Ref SessionStorage
          CONTINUATION_BUCKET: !Ref RequestContinuationBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref ConfirmAuthenticationOrAuthorizationStorage
        - S3ReadPolicy:
            BucketName: !Ref SessionStorage
      Events:
        AuthorizationGet:
          Type: HttpApi
          Properties:
            Path: "/{upstream_sub_id}/create_confirmation_ticket"
            Method: POST
            ApiId: !Ref IndieAuthApi

  ConfirmAuthenticationOrAuthorizationGet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: confirmation_get/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        AuthorizationGet:
          Type: HttpApi
          Properties:
            Path: "/{upstream_sub_id}/confirm/{confirmation_ticket}"
            Method: GET
            ApiId: !Ref IndieAuthApi

  ConfirmAuthenticationOrAuthorizationPost:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: confirmation_post/
      Handler: app.lambda_handler
      Runtime: python3.8
      Events:
        AuthorizationGet:
          Type: HttpApi
          Properties:
            Path: "/{upstream_sub_id}/confirm/{confirmation_ticket}"
            Method: POST
            ApiId: !Ref IndieAuthApi
    
  CallbackGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: callback_get/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          SESSION_BUCKET: !Ref SessionStorage
          CONTINUATION_BUCKET: !Ref RequestContinuationBucket
          UPSTREAM_OAUTH_TOKEN: !Sub "https://${CognitoDomain}/oauth2/token"
          USER_POOL: !Ref UserPool
          USER_POOL_CLIENT: !Ref UserPoolClient
          USER_POOL_CLIENT_CALLBACK: !Sub "https://${ApiDomain}/callback"
          API_DOMAIN: !Ref ApiDomain
          BACKEND_API: !Sub "https://${IndieAuthBackendApi}.execute-api.${AWS::Region}.amazonaws.com"
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref RequestContinuationBucket
        - S3WritePolicy:
            BucketName: !Ref SessionStorage
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "cognito-idp:DescribeUserPoolClient"
              Resource: !GetAtt UserPool.Arn
      Events:
        Validate:
          Type: HttpApi
          Properties:
            ApiId: !Ref IndieAuthApi
            Path: /callback
            Method: GET   

  TokenDetailsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.8
      InlineCode: |
        import json
        def lambda_handler(event,context):
          return {
            'headers': {
              "Content-Type": "application/json",
            },
            'statusCode':200,
            'body': json.dumps(event['requestContext']['authorizer']['jwt'])
          }
      Events:
        Validate:
          Type: HttpApi
          Properties:
            ApiId: !Ref IndieAuthBackendApi
            Path: /upstream-token-details
            Method: GET   
            Auth:
              AuthorizationScopes:
                - https://indieauth.spec.indieweb.org/login
              Authorizer: UpstreamCognitoAuthorizor


  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - https://indieauth.spec.indieweb.org/login
      CallbackURLs:
        - !Sub "https://${ApiDomain}/callback"
      DefaultRedirectURI: !Sub "https://${ApiDomain}/callback"
      GenerateSecret: true
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool

  ApiDomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref ApiDomain
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref ApiDomain
          HostedZoneId: !Ref HostedZoneId

  UserPoolDomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref CognitoDomain
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref CognitoDomain
          HostedZoneId: !Ref HostedZoneId

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      CustomDomainConfig: 
        CertificateArn: !Ref UserPoolDomainCertificate
      Domain: !Ref CognitoDomain
      UserPoolId: !Ref UserPool

  CogntitoDomainDNS:
    Type: AWS::Serverless::Application
    Properties: 
      Location: cognito_domain_dns.yaml
      Parameters:
        AuthDomain: !Ref CognitoDomain
        HostedZoneId: !Ref HostedZoneId

  UserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: https://indieauth.spec.indieweb.org
      Name: IndieAuth
      UserPoolId: !Ref UserPool
      Scopes:
        - ScopeName: login
          ScopeDescription: "Allow another site to confirm that you are the owner of a site"
          
Outputs:
  UserPool:
    Description: "UserPool backing this Indieauth API"
    Value: !Ref UserPool
  UserPoolArn:
    Description: "UserPool backing this Indieauth API"
    Value: !GetAtt UserPool.Arn