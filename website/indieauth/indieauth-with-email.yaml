AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A simple, single user Indieauth implementation

Parameters:
  EmailAddress:
    Type: String

Resources:
  AuthRequests:
    Type: AWS::S3::Bucket

  ServerlessRestApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: Prod
      DefinitionBody:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        x-amazon-apigateway-request-validators:
          params-only:
            validateRequestBody: false
            validateRequestParameters: true
        x-amazon-apigateway-request-validator: params-only
        paths:
          "/authorization":
            get:
              summary: Starts the IndieAuth authorization process
              parameters: 
                - in: query
                  name: response_type
                  schema:
                    type: string
                    enum:
                      - code
                  required: true
                - in : query
                  name: client_id
                  schema:
                    type: string
                    format: uri
                  required: true
                - in : query
                  name: redirect_uri
                  schema:
                    type: string
                  required: true
                - in : query
                  name: state
                  schema:
                    type: string
                  required: true
                - in : query
                  name: code_challenge
                  schema:
                    type: string
                  required: false
                - in : query
                  name: code_challenge_method
                  schema:
                    type: string
                  required: false
                - in : query
                  name: scope
                  schema:
                    type: string
                  required: false
                - in : query
                  name: me
                  schema:
                    type: string
                  required: false
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizationEndpointGet.Arn}/invocations"
                httpMethod: POST
                timeoutInMillis: 3000
                type: "aws_proxy"
                credentials: !GetAtt ApiServiceRole.Arn
              responses: {}
        openapi: 3.0.1
  HMACSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: "key"
        PasswordLength: 64
  
  SecretsManagerRotationTemplate:
    Type: AWS::Serverless::Application
    Properties:
      Location: secret-rotation.yaml
      Parameters: 
        endpoint: !Sub "https://secretsmanager.${AWS::Region}.amazonaws.com"
        functionName: !Sub "${AWS::StackName}-RotationFunction"

  HMACRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties: 
      RotationLambdaARN: !GetAtt SecretsManagerRotationTemplate.Outputs.RotationLambdaARN
      RotationRules: 
        AutomaticallyAfterDays: 5
      SecretId: !Ref HMACSecret    
  
  AuthorizationEndpointGet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: authorization_endpoint_get/
      Handler: app.lambda_handler
      Runtime: python3.8
      Environment:
        Variables:
          HMAC_SECRET_ARN: !Ref HMACSecret
      Policies:
        AWSSecretsManagerGetSecretValuePolicy:
          SecretArn: !Ref HMACSecret
  ApiServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub APIServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: lambda:InvokeFunction
                Effect: Allow
                # Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
                Resource: 
                  - !GetAtt AuthorizationEndpointGet.Arn

Outputs:
  AuthorizationEndpoint:
    Description: "an IndieAuth authorization endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/authorization"
    #Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/authorization"