AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A web site

Parameters:
  HostedZoneId:
    Type: String
  DomainName:
    Type: String
  CognitoDomain:
    Type: String
  IndieauthApiDomain:
    Type: String
  BlogName:
    Type: String
  BlogDescription:
    Type: String
  AuthorName:
    Type: String
  EmailAddress:
    Type: String


Globals:
  Function:
    Timeout: 3

Resources:
  SiteEventBus: 
    Type: AWS::Events::EventBus
    Properties: 
        Name: "SiteEventBus"
  SiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration: 
        IndexDocument: "index.html"

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId

  S3EventsToEventBus:
    # Is there a better way to get S3 notifications to a
    # custom event bus?
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: S3EventsToEventBus/
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      Environment:
        Variables:
          BUS: !Ref SiteEventBus
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: !Ref SiteEventBus
      Events:
        SiteBucketChange:
          Type: S3
          Properties:
            Bucket: !Ref SiteBucket
            Events: 
            - s3:ObjectCreated:*
            - s3:ObjectRemoved:*

  DNSAliasV4:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName 
      HostedZoneId: !Ref HostedZoneId
      Type: A
      AliasTarget:
        DNSName: !GetAtt CDN.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  DNSAliasV6:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName 
      HostedZoneId: !Ref HostedZoneId
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt CDN.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        DefaultCacheBehavior:
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          TargetOriginId: SiteBucketOrigin
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
           AcmCertificateArn: !Ref Certificate
           SslSupportMethod: sni-only
        Origins:
          - DomainName: !Sub ${SiteBucket}.s3-website.dualstack.${AWS::Region}.amazonaws.com
            Id: SiteBucketOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: http-only

  RenderFunction:    
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: render_function/
      Handler: app.lambda_handler
      Runtime: python3.8
      Description: ''
      Environment:
        Variables:
          SITE_BUCKET: !Ref SiteBucket
      MemorySize: 128
      Timeout: 300
      Policies:
        S3CrudPolicy:
          BucketName: !Ref SiteBucket
      Events:
        ConfigOrTemplateChange:
          Type: EventBridgeRule
          Properties:
            EventBusName: !Ref SiteEventBus
            Pattern: 
              detail-type: ["Simplified S3 notification"]
              detail: 
                key:
                 - {"prefix": "_templates"}
                 - "config.json"
                bucket: [!Ref SiteBucket]
    Metadata:
      BuildMethod: makefile

  BlogConfigFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: blog_config_custom_resource/
      Handler: blog_config.lambda_handler
      Runtime: python3.8
      Description: ''
      Environment:
        Variables:
          BUCKET: !Ref SiteBucket
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref SiteBucket
        - SESCrudPolicy:
            IdentityName: !Ref EmailAddress
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - "ses:VerifyEmailAddress" # Why doesn't SESCrud include this?
                - "ses:ListIdentities"
              Resource: "*"
      MemorySize: 128
      Timeout: 300

  BlogConfig:
    Type: 'Custom::CustomResource'
    DependsOn: 
      - RenderFunction
    Properties:
      DomainName: !Ref DomainName
      BlogName: !Ref BlogName
      BlogDescription: !Ref BlogDescription
      AuthorName: !Ref AuthorName
      AuthorizationEndpoint: !Sub "${IndieAuthEndpointsForUser.Outputs.UserAuthorizationEndpoint}"
      TokenEndpoint: !Sub "${IndieAuthEndpointsForUser.Outputs.UserTokenEndpoint}"
      EmailAddress: !Ref EmailAddress
      CognitoDomain: !Ref CognitoDomain
      ServiceToken:
        'Fn::GetAtt':
          - BlogConfigFunction
          - Arn

  UserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: !Ref EmailAddress
      UserPoolId: !GetAtt IndieAuth.Outputs.UserPool
      UserAttributes:
        - Name: email
          Value: !Ref EmailAddress
        - Name: website
          Value: !Sub "https://${DomainName}"

  IndieAuth:
    Type: AWS::Serverless::Application
    Properties: 
      Location: indieauth/template.yaml
      Parameters:
        CognitoDomain: !Ref CognitoDomain
        HostedZoneId: !Ref HostedZoneId
        ApiDomain: !Ref IndieauthApiDomain


  IndieAuthEndpointsForUser:
    Type: AWS::Serverless::Application
    Properties:
      Location: indieauth/endpoint-for-user.yaml
      Parameters:
        UserPoolId: !GetAtt IndieAuth.Outputs.UserPool
        UserPoolArn: !GetAtt IndieAuth.Outputs.UserPoolArn
        Username: !Ref UserPoolUser
        ApiDomain: !Ref IndieauthApiDomain